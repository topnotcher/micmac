main:
	; load the address of the root node 
	LOCO root

	; dbg_print ac

	; PUSH address of root node onto stack.
	PUSH

	; Allocate space for return value.
	PUSH

	CALL count

	; pop off the return value.
	POP

	; store it in result 
	STOD result 

	done: JUMP done ; dbg_print result
	
count:
	; stack:
	;	0 = local1
	;	1 = return addr
	;	2 = return value
	;	3 = my arg

	; local variable: number of branches to check
	; (e.g. iterate "foreach branch")
	; M[--SP] = 2
	LODD two
	PUSH 

	; set return value to 1 (count this node)
	; M[SP+2] = 1
	LODD one 
	STOL 2

	; if there are branches left to check,
	; add the size of teh branch to the return value
	check_branch:

		; M[SP] in {2,1,0}
		LODL 0
	
		; dbg_print ac
		; no branches left.
		JZER return
		
		; otherwise (note we checked a branch)
		; M[--SP] = AC-1
		SUBD one
		STOL 0
			
		; load the argument
		LODL 3
		
		;dbg_print ac

		; ac contains the address of the address of a node, e.g.
		; M[AC] = node value
		; M[AC+1] = address of left branch
		; M[AC+2] = address of right branch

		; now M[AC] = address of left branch.
		; AC = M[SP+3] += 1
		ADDD one 
		STOL 3

		;dbg_print ac

		; PSHI => M[--SP] = M[AC]
		; e.g. dereference the pointer
		PSHI
		POP

		; AC = address of left branch

		; dbg_print ac
		JNZE add_branch

		; check next branch, if any
		JUMP check_branch

	; prior to jumping to either
	; add_left or add_right,
	; AC = the address of the node to check
	add_branch:
		
		; PUSH the address onto the stack 
		PUSH

		; Allocate space for return value
		PUSH

		CALL count
	
		; POP the return value off
		POP 
		
		; deallocate space used for the arg.
		INSP 1

		; add it to this FN's return value.
		ADDL 2
	
		; Store it back in the return value.
		STOL 2

		; now check the next branch (if any).
		JUMP check_branch

	return: 
		; discard my local
		POP
		RETN


one: DEFN 1
two: DEFN 2
result: DEFN 0

; a test binary tree
root:
	DEFN 1
	DEFN node2
	DEFN node3

; left branch.
node2:
	DEFN 1
	DEFN node4
	DEFN node5

; right branch.
node3: 
	DEFN 1
	DEFN node6
	DEFN node7

node4: 
	DEFN 1
	DEFN 0
	DEFN 0

node5: 
	DEFN 1
	DEFN 0
	DEFN 0

node6: 
	DEFN 1
	DEFN 0
	DEFN 0

node7: 
	DEFN 1
	DEFN 0
	DEFN 0


