Main:
	LODD	N

	; assume that input n>=1. (n==0 should return 0. < 0 is undefined)
	; N -= 2
	SUBD	two


	; f(1): if n - 2 < 0, then n==1, so result == 1 
	JNEG	Stop

fibonacci:	

	LODD	N

	; similarly: f(2) = 1. 
	; Also handles when N decrements sufficiently 
	JZER	Stop

	; load f0 into AC
	LODD	f0

	; result = f0 + f1 = AC + f1
	ADDD	f1
	STOD	Result

	; now update the previous two elements...
	; set f0=f1 (shift left)
	LODD	f1
	STOD	f0

	; set f1=result
	LODD	Result 
	STOD	f1
	
	; n -= 1
	LODD	N
	SUBD	one
	STOD	N

	; loop
	JUMP	fibonacci

Stop:
	JUMP	Stop

two:	DEFN	2
one:	DEFN	1

; Previous two elements in the sequence
f0:	DEFN	1
f1:	DEFN	1

; Input
N:	DEFN	10

; result of f(n)
Result:	DEFN	1

